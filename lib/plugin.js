// Generated by CoffeeScript 1.6.2
(function() {
  var DEFAULT_OPTIONS, Watcher, _;

  _ = require('lodash');

  Watcher = require('./watcher');

  DEFAULT_OPTIONS = {
    interval: 1000,
    path: 'state',
    query: {},
    sort: {},
    select: {},
    autoIndex: true
  };

  module.exports = function(schema, pluginOpts) {
    var index;

    if (pluginOpts == null) {
      pluginOpts = {};
    }
    pluginOpts = _.extend({}, DEFAULT_OPTIONS, pluginOpts);
    if (pluginOpts.autoIndex) {
      index = {};
      index[pluginOpts.path] = 1;
      _.extend(index, pluginOpts.sort);
      schema.index(index);
    }
    return schema.statics.poll = function(from, to, opts, callback) {
      var checker, query, queryOptions, update, watcher,
        _this = this;

      if (opts == null) {
        opts = {};
      }
      if (_.isFunction(opts)) {
        callback = opts;
        opts = {};
      }
      opts = _.extend({}, pluginOpts, opts);
      if (!_.isFunction(callback)) {
        throw new Error('callback should be a function');
      }
      query = function() {
        var q, _ref;

        q = _.clone((_ref = typeof opts.query === "function" ? opts.query() : void 0) != null ? _ref : opts.query);
        q[opts.path] = from;
        return q;
      };
      update = {};
      update[opts.path] = to;
      queryOptions = {
        upsert: false,
        "new": true,
        sort: opts.sort,
        select: opts.select
      };
      checker = function(cb) {
        return _this.findOneAndUpdate(query(), update, queryOptions, cb);
      };
      watcher = new Watcher(checker, opts.interval);
      watcher.on('data', function(doc) {
        return callback.call(doc, doc);
      });
      watcher.start();
      return watcher;
    };
  };

}).call(this);
